Java Streams:

--> Sequence of data that we can process in a declarative and functional style.
--> It allows us to perform opertaions like filtering, mapping and reducing on the collection of data.
--> It can be used with various data sources, including arrays, collections, I/O channels.

	1. Intermediate operations
	2. Terminal Operations

List<String> myList= Arrays.asList("Apple","Mango","Banana");
1. Stream Creations

i) Collections
Stream <String> seq_st= myList.stream();
Stream<String> Par_Stream= myList.parallelStream();

ii) Arrays.stream()
int[] numbers={10,20,30,40,50};
IntStream stream=Arrays.stream(numbers);

iii)Other Data Sources.
Stream<String> st= Stream.of("Apple","Banana","Orange");


Intermediate Operations:
	
i) filter() --> It is based on a predicate



import java.util.*;
import java.util.stream.Collectors;

public class Main
{
	public static void main(String[] args) {
		
		
		List<String> names=Arrays.asList("sai","sree","abi","bavya","kani","priya");
		
		List<String> filteredNames= names.stream().filter( n -> n.startsWith("s")).collect(Collectors.toList());
		System.out.println(filteredNames);
	}
}


ii) map(): Transform elements using a function

import java.util.*;
import java.util.stream.Collectors;

public class Main
{
	public static void main(String[] args) {
		
		
		List<String> names=Arrays.asList("sai","sree","abi","bavya","kani","priya");
		
		List<Integer> lengthOfNames= names.stream().map( String::length).collect(Collectors.toList());
		System.out.println(lengthOfNames);
	}
}


iii) Sorted(): Sort elements


import java.util.*;
import java.util.stream.Collectors;

public class Main
{
	public static void main(String[] args) {
		
		
		List<String> names=Arrays.asList("sai","sree","abi","bavya","kani","priya");
		
		List<String> sortedNames= names.stream().sorted().collect(Collectors.toList());
		System.out.println(sortedNames);
	}
}


iV) distinct(): Removes duplicate elements

import java.util.*;
import java.util.stream.Collectors;

public class Main
{
	public static void main(String[] args) {
		
		
		List<String> names=Arrays.asList("sai","sree","abi","bavya","kani","priya","priya","sree","sai");
		
		List<String> distinctNames= names.stream().distinct().collect(Collectors.toList());
		System.out.println(distinctNames);
	}
}


v) flatMap() -> used to flattedn nested collections into a single stream
		-> it convert a stream of list into stream of elements

import java.util.*;
import java.util.stream.Collectors;

public class Main
{
	public static void main(String[] args) {
		
		
		

List< List<Integer> > nestedList =Arrays.asList(
					Arrays.asList(1,2),Arrays.asList(3,4),Arrays.asList(5,6));

List<Integer> flat_list=nestedList.stream().flatMap(List::stream).collect(Collectors.toList());

System.out.println(nestedList);
System.out.println(flat_list);


	}
}




------------------------------------------------------------

Terminal Operations


i) collect()
ii) reduce()

*******************************************************************************/
import java.util.*;
import java.util.stream.Collectors;

public class Main
{
	public static void main(String[] args) {
		
		
		

List<Integer> nums=Arrays.asList(1,2,3,4,5);

int sum=nums.stream().reduce(0,Integer::sum);
System.out.println(sum);


	}
}


iii) max() and min()

iv) forEach()

v) ifPresent()



-------------------------------------------------------------------------------------------

Multithreading!!!!!


Multithreading in Java allows multiple threads of execution to run concurrently within a single program. Threads are lightweight processes, and they enable developers to write programs that can perform multiple tasks concurrently, improving overall system efficiency and responsiveness.


Thead!!!!!!!!!!!


A thread is a lightweight unit of execution within a process. It has its stack of memory and can run independently of other threads in the same process. Threads share the same process resources, such as the heap and the code section. The Java Virtual Machine allows an application to have multiple threads of execution running concurrently.

Every thread has a priority. Threads with higher priority are executed in preference to threads with lower priority. Each thread may or may not also be marked as a daemon...

!!!!!!!!!!Thread States!!!!!!!!!!!!!!!


New: A thread has  not started is in this state

Runnable: thread executing in JVM is in this state

Blocked: thread that is blocked waiting for monitor lock

Waiting: thread is waiting indefinitely for another thread to perform a particular action in this state.

Timed_waiting: wait for specified waiting time 

Terminated: thread that has exited is in this state





























































