Design patterns::
		
	The design pattern is a reusable solution to a common problem that occurs in software design.

		-> Creational DP
		-> Structural DP
		-> Behavioural DP


1. Singleton design pattern ( Creational)
		-> A class has only one instance and provides a global point of access to it.

*Pseudocode*


class Database 
    private static field instance: Database

    // The singleton's constructor should always be private to
    // prevent direct construction calls with the `new`
    // operator.
    private constructor Database() is
        // Some initialization code, such as the actual
        // connection to a database server.
        // ...

    // The static method that controls access to the singleton
    // instance.
    public static method getInstance() is
        if (Database.instance == null) then
            acquireThreadLock() and then
                // Ensure that the instance hasn't yet been
                // initialized by another thread while this one
                // has been waiting for the lock's release.
                if (Database.instance == null) then
                    Database.instance = new Database()
        return Database.instance

    // Finally, any singleton should define some business logic
    // which can be executed on its instance.
    public method query(sql) is
        // For instance, all database queries of an app go
        // through this method. Therefore, you can place
        // throttling or caching logic here.
        // ...

class Application is
    method main() is
        Database foo = Database.getInstance()
        foo.query("SELECT ...")
        // ...
        Database bar = Database.getInstance()
        bar.query("SELECT ...")
        // The variable `bar` will contain the same object as
        // the variable `foo`.


**How to Implement**

Add a private static field to the class for storing the singleton instance.

Declare a public static creation method for getting the singleton instance.

Implement “lazy initialization” inside the static method. It should create a new object on its first call and put it into the static field. The method should always return that instance on all subsequent calls.

Make the constructor of the class private. The static method of the class will still be able to call the constructor, but not the other objects.

Go over the client code and replace all direct calls to the singleton’s constructor with calls to its static creation method.



2. Data Access Object (Structural design pattern)
		The DAO pattern fits into this category because:

		It structures the data access layer of an application, separating it from business logic.
		It provides a structured way to abstract and encapsulate all access to the data source.
		It defines a clear interface for data operations, allowing for different implementations without affecting the rest of the application structure.



Separation of Concerns: Each package handles a distinct aspect of the application, making it easier to manage and understand. The separation helps in organizing code logically based on functionality.


public class CountryEntity {
    private Long id;
    private String name;
    private String abbreviation;
}

public interface CountryDAO {
    CountryEntity fetch(Long id);
    Long save(CountryEntity country);
    void update(CountryEntity country);
    int delete(Long id);
}

public class CountryDAOImpl implements CountryDAO {
    Private final EntityManager entityManager;
        
    CountryEntity fetch(Long id) {
        return entityManager.find(CountryEntity.class, id);
    }
    Long save(CountryEntity country) {
        return entityManager.persist(country);
    }
    // ...
}















